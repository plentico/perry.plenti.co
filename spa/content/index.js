/* generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	init,
	insert,
	is_function,
	listen,
	noop,
	prevent_default,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text
} from '/spa/web_modules/svelte/internal/index.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i][0];
	child_ctx[14] = list[i][1];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[23] = list[i];
	return child_ctx;
}

// (41:2) {#each options.body as body}
function create_each_block_3(ctx) {
	let a;
	let t_value = /*body*/ ctx[23] + "";
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", "/");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);

			if (!mounted) {
				dispose = listen(a, "click", prevent_default(function () {
					if (is_function(/*setBody*/ ctx[9](/*body*/ ctx[23]))) /*setBody*/ ctx[9](/*body*/ ctx[23]).apply(this, arguments);
				}));

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*options*/ 2 && t_value !== (t_value = /*body*/ ctx[23] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(a);
			mounted = false;
			dispose();
		}
	};
}

// (48:2) {#each options.eyes as eyes}
function create_each_block_2(ctx) {
	let a;
	let t_value = /*eyes*/ ctx[20] + "";
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", "/");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);

			if (!mounted) {
				dispose = listen(a, "click", prevent_default(function () {
					if (is_function(/*setEyes*/ ctx[10](/*eyes*/ ctx[20]))) /*setEyes*/ ctx[10](/*eyes*/ ctx[20]).apply(this, arguments);
				}));

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*options*/ 2 && t_value !== (t_value = /*eyes*/ ctx[20] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(a);
			mounted = false;
			dispose();
		}
	};
}

// (55:2) {#each options.shirts as shirt}
function create_each_block_1(ctx) {
	let a;
	let t_value = /*shirt*/ ctx[17] + "";
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", "/");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);

			if (!mounted) {
				dispose = listen(a, "click", prevent_default(function () {
					if (is_function(/*setShirt*/ ctx[11](/*shirt*/ ctx[17]))) /*setShirt*/ ctx[11](/*shirt*/ ctx[17]).apply(this, arguments);
				}));

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*options*/ 2 && t_value !== (t_value = /*shirt*/ ctx[17] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(a);
			mounted = false;
			dispose();
		}
	};
}

// (62:2) {#each Object.entries(options.accessories) as [key, val]}
function create_each_block(ctx) {
	let a;
	let t_value = /*key*/ ctx[13] + "";
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", "/");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);

			if (!mounted) {
				dispose = listen(a, "click", prevent_default(function () {
					if (is_function(/*setAccessory*/ ctx[12](/*key*/ ctx[13], /*val*/ ctx[14]))) /*setAccessory*/ ctx[12](/*key*/ ctx[13], /*val*/ ctx[14]).apply(this, arguments);
				}));

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*options*/ 2 && t_value !== (t_value = /*key*/ ctx[13] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(a);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let div8;
	let section0;
	let img0;
	let img0_src_value;
	let t2;
	let img1;
	let img1_src_value;
	let t3;
	let img2;
	let img2_src_value;
	let t4;
	let img3;
	let img3_src_value;
	let t5;
	let section1;
	let div0;
	let strong0;
	let t6;
	let t7;
	let div1;
	let t8;
	let br0;
	let t9;
	let div2;
	let strong1;
	let t10;
	let t11;
	let div3;
	let t12;
	let br1;
	let t13;
	let div4;
	let strong2;
	let t14;
	let t15;
	let div5;
	let t16;
	let br2;
	let t17;
	let div6;
	let strong3;
	let t18;
	let t19;
	let div7;
	let t20;
	let br3;
	let each_value_3 = /*options*/ ctx[1].body;
	let each_blocks_3 = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks_3[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	let each_value_2 = /*options*/ ctx[1].eyes;
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value_1 = /*options*/ ctx[1].shirts;
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = Object.entries(/*options*/ ctx[1].accessories);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			h1 = element("h1");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			div8 = element("div");
			section0 = element("section");
			img0 = element("img");
			t2 = space();
			img1 = element("img");
			t3 = space();
			img2 = element("img");
			t4 = space();
			img3 = element("img");
			t5 = space();
			section1 = element("section");
			div0 = element("div");
			strong0 = element("strong");
			t6 = text("Body");
			t7 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].c();
			}

			t8 = space();
			br0 = element("br");
			t9 = space();
			div2 = element("div");
			strong1 = element("strong");
			t10 = text("Eyes");
			t11 = space();
			div3 = element("div");

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t12 = space();
			br1 = element("br");
			t13 = space();
			div4 = element("div");
			strong2 = element("strong");
			t14 = text("Shirt");
			t15 = space();
			div5 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t16 = space();
			br2 = element("br");
			t17 = space();
			div6 = element("div");
			strong3 = element("strong");
			t18 = text("Accessories");
			t19 = space();
			div7 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t20 = space();
			br3 = element("br");
			this.h();
		},
		l(nodes) {
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, /*title*/ ctx[0]);
			h1_nodes.forEach(detach);
			t1 = claim_space(nodes);
			div8 = claim_element(nodes, "DIV", { id: true, class: true });
			var div8_nodes = children(div8);
			section0 = claim_element(div8_nodes, "SECTION", { id: true, class: true });
			var section0_nodes = children(section0);
			img0 = claim_element(section0_nodes, "IMG", { id: true, src: true, alt: true });
			t2 = claim_space(section0_nodes);

			img1 = claim_element(section0_nodes, "IMG", {
				id: true,
				src: true,
				alt: true,
				class: true
			});

			t3 = claim_space(section0_nodes);

			img2 = claim_element(section0_nodes, "IMG", {
				id: true,
				src: true,
				alt: true,
				class: true
			});

			t4 = claim_space(section0_nodes);

			img3 = claim_element(section0_nodes, "IMG", {
				id: true,
				style: true,
				src: true,
				alt: true,
				class: true
			});

			section0_nodes.forEach(detach);
			t5 = claim_space(div8_nodes);
			section1 = claim_element(div8_nodes, "SECTION", { id: true, class: true });
			var section1_nodes = children(section1);
			div0 = claim_element(section1_nodes, "DIV", {});
			var div0_nodes = children(div0);
			strong0 = claim_element(div0_nodes, "STRONG", {});
			var strong0_nodes = children(strong0);
			t6 = claim_text(strong0_nodes, "Body");
			strong0_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t7 = claim_space(section1_nodes);
			div1 = claim_element(section1_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach);
			t8 = claim_space(section1_nodes);
			br0 = claim_element(section1_nodes, "BR", {});
			t9 = claim_space(section1_nodes);
			div2 = claim_element(section1_nodes, "DIV", {});
			var div2_nodes = children(div2);
			strong1 = claim_element(div2_nodes, "STRONG", {});
			var strong1_nodes = children(strong1);
			t10 = claim_text(strong1_nodes, "Eyes");
			strong1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t11 = claim_space(section1_nodes);
			div3 = claim_element(section1_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].l(div3_nodes);
			}

			div3_nodes.forEach(detach);
			t12 = claim_space(section1_nodes);
			br1 = claim_element(section1_nodes, "BR", {});
			t13 = claim_space(section1_nodes);
			div4 = claim_element(section1_nodes, "DIV", {});
			var div4_nodes = children(div4);
			strong2 = claim_element(div4_nodes, "STRONG", {});
			var strong2_nodes = children(strong2);
			t14 = claim_text(strong2_nodes, "Shirt");
			strong2_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			t15 = claim_space(section1_nodes);
			div5 = claim_element(section1_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(div5_nodes);
			}

			div5_nodes.forEach(detach);
			t16 = claim_space(section1_nodes);
			br2 = claim_element(section1_nodes, "BR", {});
			t17 = claim_space(section1_nodes);
			div6 = claim_element(section1_nodes, "DIV", {});
			var div6_nodes = children(div6);
			strong3 = claim_element(div6_nodes, "STRONG", {});
			var strong3_nodes = children(strong3);
			t18 = claim_text(strong3_nodes, "Accessories");
			strong3_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			t19 = claim_space(section1_nodes);
			div7 = claim_element(section1_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div7_nodes);
			}

			div7_nodes.forEach(detach);
			t20 = claim_space(section1_nodes);
			br3 = claim_element(section1_nodes, "BR", {});
			section1_nodes.forEach(detach);
			div8_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h1, "class", "svelte-1fsvewg");
			attr(img0, "id", "body");
			if (img0.src !== (img0_src_value = "/assets/body/" + /*imgBody*/ ctx[2] + ".svg")) attr(img0, "src", img0_src_value);
			attr(img0, "alt", "the body of the planarian");
			attr(img1, "id", "eyes");
			if (img1.src !== (img1_src_value = "/assets/eyes/" + /*imgEyes*/ ctx[3] + ".svg")) attr(img1, "src", img1_src_value);
			attr(img1, "alt", "the eyes of the planarian");
			attr(img1, "class", "svelte-1fsvewg");
			attr(img2, "id", "shirt");
			if (img2.src !== (img2_src_value = "/assets/shirts/" + /*imgShirt*/ ctx[4] + ".svg")) attr(img2, "src", img2_src_value);
			attr(img2, "alt", "the shirt of the planarian");
			attr(img2, "class", "svelte-1fsvewg");
			attr(img3, "id", "accessory");
			set_style(img3, "width", /*accessoryWidth*/ ctx[6]);
			set_style(img3, "top", /*accessoryTop*/ ctx[7]);
			set_style(img3, "left", /*accessoryLeft*/ ctx[8]);
			if (img3.src !== (img3_src_value = "/assets/accessories/" + /*imgAccessory*/ ctx[5] + ".svg")) attr(img3, "src", img3_src_value);
			attr(img3, "alt", "the accessory of the planarian");
			attr(img3, "class", "svelte-1fsvewg");
			attr(section0, "id", "render");
			attr(section0, "class", "svelte-1fsvewg");
			attr(div1, "class", "links svelte-1fsvewg");
			attr(div3, "class", "links svelte-1fsvewg");
			attr(div5, "class", "links svelte-1fsvewg");
			attr(div7, "class", "links svelte-1fsvewg");
			attr(section1, "id", "options");
			attr(section1, "class", "svelte-1fsvewg");
			attr(div8, "id", "main");
			attr(div8, "class", "svelte-1fsvewg");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, div8, anchor);
			append(div8, section0);
			append(section0, img0);
			append(section0, t2);
			append(section0, img1);
			append(section0, t3);
			append(section0, img2);
			append(section0, t4);
			append(section0, img3);
			append(div8, t5);
			append(div8, section1);
			append(section1, div0);
			append(div0, strong0);
			append(strong0, t6);
			append(section1, t7);
			append(section1, div1);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].m(div1, null);
			}

			append(section1, t8);
			append(section1, br0);
			append(section1, t9);
			append(section1, div2);
			append(div2, strong1);
			append(strong1, t10);
			append(section1, t11);
			append(section1, div3);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(div3, null);
			}

			append(section1, t12);
			append(section1, br1);
			append(section1, t13);
			append(section1, div4);
			append(div4, strong2);
			append(strong2, t14);
			append(section1, t15);
			append(section1, div5);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div5, null);
			}

			append(section1, t16);
			append(section1, br2);
			append(section1, t17);
			append(section1, div6);
			append(div6, strong3);
			append(strong3, t18);
			append(section1, t19);
			append(section1, div7);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div7, null);
			}

			append(section1, t20);
			append(section1, br3);
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);

			if (dirty & /*imgBody*/ 4 && img0.src !== (img0_src_value = "/assets/body/" + /*imgBody*/ ctx[2] + ".svg")) {
				attr(img0, "src", img0_src_value);
			}

			if (dirty & /*imgEyes*/ 8 && img1.src !== (img1_src_value = "/assets/eyes/" + /*imgEyes*/ ctx[3] + ".svg")) {
				attr(img1, "src", img1_src_value);
			}

			if (dirty & /*imgShirt*/ 16 && img2.src !== (img2_src_value = "/assets/shirts/" + /*imgShirt*/ ctx[4] + ".svg")) {
				attr(img2, "src", img2_src_value);
			}

			if (dirty & /*accessoryWidth*/ 64) {
				set_style(img3, "width", /*accessoryWidth*/ ctx[6]);
			}

			if (dirty & /*accessoryTop*/ 128) {
				set_style(img3, "top", /*accessoryTop*/ ctx[7]);
			}

			if (dirty & /*accessoryLeft*/ 256) {
				set_style(img3, "left", /*accessoryLeft*/ ctx[8]);
			}

			if (dirty & /*imgAccessory*/ 32 && img3.src !== (img3_src_value = "/assets/accessories/" + /*imgAccessory*/ ctx[5] + ".svg")) {
				attr(img3, "src", img3_src_value);
			}

			if (dirty & /*setBody, options*/ 514) {
				each_value_3 = /*options*/ ctx[1].body;
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks_3[i]) {
						each_blocks_3[i].p(child_ctx, dirty);
					} else {
						each_blocks_3[i] = create_each_block_3(child_ctx);
						each_blocks_3[i].c();
						each_blocks_3[i].m(div1, null);
					}
				}

				for (; i < each_blocks_3.length; i += 1) {
					each_blocks_3[i].d(1);
				}

				each_blocks_3.length = each_value_3.length;
			}

			if (dirty & /*setEyes, options*/ 1026) {
				each_value_2 = /*options*/ ctx[1].eyes;
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_2(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(div3, null);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_2.length;
			}

			if (dirty & /*setShirt, options*/ 2050) {
				each_value_1 = /*options*/ ctx[1].shirts;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div5, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*setAccessory, Object, options*/ 4098) {
				each_value = Object.entries(/*options*/ ctx[1].accessories);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div7, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(div8);
			destroy_each(each_blocks_3, detaching);
			destroy_each(each_blocks_2, detaching);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props, { options } = $$props;
	let imgBody = "blue";
	let imgEyes = "blue";
	let imgShirt = "svelte";
	let imgAccessory = "mask";
	let accessoryWidth = "315px";
	let accessoryTop = "50px";
	let accessoryLeft = "49px";

	const setBody = body => {
		$$invalidate(2, imgBody = body);
	};

	const setEyes = eyes => {
		$$invalidate(3, imgEyes = eyes);
	};

	const setShirt = shirt => {
		$$invalidate(4, imgShirt = shirt);
	};

	const setAccessory = (accessory, val) => {
		$$invalidate(5, imgAccessory = accessory);
		$$invalidate(6, accessoryWidth = val.width);
		$$invalidate(7, accessoryTop = val.top);
		$$invalidate(8, accessoryLeft = val.left);
	};

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("options" in $$props) $$invalidate(1, options = $$props.options);
	};

	return [
		title,
		options,
		imgBody,
		imgEyes,
		imgShirt,
		imgAccessory,
		accessoryWidth,
		accessoryTop,
		accessoryLeft,
		setBody,
		setEyes,
		setShirt,
		setAccessory
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0, options: 1 });
	}
}

export default Component;